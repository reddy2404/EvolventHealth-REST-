//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EvolventDemo.EvolReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Evolvent", Namespace="")]
    [System.SerializableAttribute()]
    public partial class Evolvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string PhoneNo {
            get {
                return this.PhoneNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNoField, value) != true)) {
                    this.PhoneNoField = value;
                    this.RaisePropertyChanged("PhoneNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EvolReference.IEvolventHealth")]
    public interface IEvolventHealth {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/GetList", ReplyAction="http://tempuri.org/IEvolventHealth/GetListResponse")]
        EvolventDemo.EvolReference.Evolvent[] GetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/GetList", ReplyAction="http://tempuri.org/IEvolventHealth/GetListResponse")]
        System.Threading.Tasks.Task<EvolventDemo.EvolReference.Evolvent[]> GetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/AddEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/AddEvolventResponse")]
        void AddEvolvent(EvolventDemo.EvolReference.Evolvent evl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/AddEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/AddEvolventResponse")]
        System.Threading.Tasks.Task AddEvolventAsync(EvolventDemo.EvolReference.Evolvent evl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/UpdateEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/UpdateEvolventResponse")]
        void UpdateEvolvent(EvolventDemo.EvolReference.Evolvent evl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/UpdateEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/UpdateEvolventResponse")]
        System.Threading.Tasks.Task UpdateEvolventAsync(EvolventDemo.EvolReference.Evolvent evl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/DeleteEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/DeleteEvolventResponse")]
        void DeleteEvolvent(EvolventDemo.EvolReference.Evolvent evl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvolventHealth/DeleteEvolvent", ReplyAction="http://tempuri.org/IEvolventHealth/DeleteEvolventResponse")]
        System.Threading.Tasks.Task DeleteEvolventAsync(EvolventDemo.EvolReference.Evolvent evl);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEvolventHealthChannel : EvolventDemo.EvolReference.IEvolventHealth, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EvolventHealthClient : System.ServiceModel.ClientBase<EvolventDemo.EvolReference.IEvolventHealth>, EvolventDemo.EvolReference.IEvolventHealth {
        
        public EvolventHealthClient() {
        }
        
        public EvolventHealthClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EvolventHealthClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvolventHealthClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvolventHealthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EvolventDemo.EvolReference.Evolvent[] GetList() {
            return base.Channel.GetList();
        }
        
        public System.Threading.Tasks.Task<EvolventDemo.EvolReference.Evolvent[]> GetListAsync() {
            return base.Channel.GetListAsync();
        }
        
        public void AddEvolvent(EvolventDemo.EvolReference.Evolvent evl) {
            base.Channel.AddEvolvent(evl);
        }
        
        public System.Threading.Tasks.Task AddEvolventAsync(EvolventDemo.EvolReference.Evolvent evl) {
            return base.Channel.AddEvolventAsync(evl);
        }
        
        public void UpdateEvolvent(EvolventDemo.EvolReference.Evolvent evl) {
            base.Channel.UpdateEvolvent(evl);
        }
        
        public System.Threading.Tasks.Task UpdateEvolventAsync(EvolventDemo.EvolReference.Evolvent evl) {
            return base.Channel.UpdateEvolventAsync(evl);
        }
        
        public void DeleteEvolvent(EvolventDemo.EvolReference.Evolvent evl) {
            base.Channel.DeleteEvolvent(evl);
        }
        
        public System.Threading.Tasks.Task DeleteEvolventAsync(EvolventDemo.EvolReference.Evolvent evl) {
            return base.Channel.DeleteEvolventAsync(evl);
        }
    }
}
